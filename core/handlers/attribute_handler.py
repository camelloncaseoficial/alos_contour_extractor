# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AlosContourExtractor
                                 A QGIS plugin
 Creates contour and elevation points from Alos Palsar DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-20
        copyright            : (C) 2021 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francisco Alves Camello Neto'
__date__ = '2021-07-30'
__copyright__ = '(C) 2021 by CamellOnCase'

from qgis.analysis import QgsGeometrySnapper, QgsInternalGeometrySnapper
from qgis.core import (edit, Qgis, QgsFields, QgsCoordinateReferenceSystem, QgsCoordinateTransform,
                       QgsExpression, QgsFeature, QgsFeatureRequest, QgsField, QgsGeometry, QgsMessageLog,
                       QgsProcessingContext, QgsProcessingMultiStepFeedback, QgsProcessingUtils, QgsProject,
                       QgsSpatialIndex, QgsVectorDataProvider, QgsVectorLayer, QgsVectorLayerUtils, QgsWkbTypes,
                       QgsProcessingFeatureSourceDefinition, QgsFeatureSink)
from qgis.PyQt.Qt import QObject, QVariant
from ..algorithms.algorithm_runner import AlgorithmRunner

class AttributeHandler(QObject):
    """
    Docstring
    """

    def __init__(self, iface=None, parent=None):
        super(AttributeHandler, self).__init__()
        self.parent = parent
        self.iface = iface
        if iface:
            self.canvas = iface.mapCanvas()
        # self.featureHandler = FeatureHandler(iface)
        # self.geometryHandler = GeometryHandler(iface)
        self.algorithm_runner = AlgorithmRunner()

    def set_attribute_value(self, feature, field_name, field_value):
        feature[field_name] = field_value

        return feature



    def create_fields(self, elevation_attribute=None, flag=False):
        """
        Docstring
        :return: (QgsRectangle) raster bounding box
        """
        contour_fields = QgsFields()

        if flag:
            contour_fields.append(QgsField('reason', QVariant.Int))
            return contour_fields

        contour_fields.append(QgsField('Id', QVariant.Int))
        contour_fields.append(QgsField(elevation_attribute, QVariant.Double))

        return contour_fields

    def delete_fields(self, input_layer, field_list, context, feedback=None):
        """
        Docstring
        :return: (QgsRectangle) raster bounding box
        """
        output = self.algorithm_runner.run_delete_field(input_layer, field_list, context, feedback=None)

        return output

