# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AlosContourExtractor
                                 A QGIS plugin
 Creates contour and elevation points from Alos Palsar DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-20
        copyright            : (C) 2021 by CamellOnCase
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francisco Alves Camello Neto'
__date__ = '2021-07-20'
__copyright__ = '(C) 2021 by CamellOnCase'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
import processing
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (Qgis, QgsFeatureRequest,
                       QgsGeometry,
                       QgsFeature,
                       QgsWkbTypes,
                       QgsVectorLayer,
                       QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterField,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingException)

from .core.handlers.raster_handler import RasterHandler
from .core.handlers.vector_handler import VectorHandler
from .core.algorithms.algorithm_runner import AlgorithmRunner


class DemElevationPointsExtractorAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    OUTPUT = 'OUTPUT'
    VECTOR_INPUT = 'VECTOR_INPUT'
    ELEVATION = 'ELEVATION'
    RASTER_INPUT = 'RASTER_INPUT'
    OUTERSHELL = 'OUTERSHELL'
    DONUTHOLE = 'DONUTHOLE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.RASTER_INPUT,
                self.tr('Input DEM raster'),
                [QgsProcessing.TypeRaster]
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.VECTOR_INPUT,
                self.tr('Input contour layer'),
                [QgsProcessing.TypeVectorLine]
            )
        )
        self.addParameter(
            QgsProcessingParameterField(
                self.ELEVATION,
                self.tr('Elevation field'),
                parentLayerParameterName=self.VECTOR_INPUT
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTERSHELL,
                self.tr('Outer Shell')
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.DONUTHOLE,
                self.tr('Donut Hole')
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        raster_handler = RasterHandler()
        vector_handler = VectorHandler()
        algo_runner = AlgorithmRunner()

        input_vector_layer = self.parameterAsVectorLayer(
            parameters, self.VECTOR_INPUT, context)

        inputType = QgsWkbTypes.PointGeometry
        
        inputCrs = input_vector_layer.sourceCrs()
        isMulti = QgsWkbTypes.isMultiType(int(inputType))
        inputFields = input_vector_layer.fields()

        dem_raster = self.parameterAsRasterLayer(
            parameters, self.RASTER_INPUT, context)

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                                               context, inputFields, 1, inputCrs)
        (outershell_sink, outershell_dest_id) = self.parameterAsSink(parameters, self.OUTERSHELL,
                                                                     context, inputFields, 6 if isMulti else 3, input_vector_layer.sourceCrs())
        if outershell_sink is None:
            raise QgsProcessingException(
                self.invalidSinkError(parameters, self.OUTERSHELL))

        (donuthole_sink, donuthole_dest_id) = self.parameterAsSink(parameters, self.DONUTHOLE,
                                                                   context, inputFields, 6 if isMulti else 3, input_vector_layer.sourceCrs())
        if outershell_sink is None:
            raise QgsProcessingException(
                self.invalidSinkError(parameters, self.DONUTHOLE))

        donut_list = []
        donut_layer_type = "LineString?crs={}".format(input_vector_layer.crs())
        donut_layer = QgsVectorLayer(
            donut_layer_type, "donut_layer",  "memory")
        donut_layer_provider = donut_layer.dataProvider()

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / input_vector_layer.featureCount() if input_vector_layer.featureCount() else 0

        multiStepFeedback = QgsProcessingMultiStepFeedback(5, feedback)
        multiStepFeedback.setCurrentStep(0)
        multiStepFeedback.pushInfo(self.tr('Multi to single part'))

        point_pixels = algo_runner.run_pixels_to_points(dem_raster, 1, 'cota', context, feedback)

        single_contour_lines = algo_runner.run_multi_to_single_part(input_vector_layer, context, feedback)

        features = single_contour_lines.getFeatures()

        multiStepFeedback.setCurrentStep(1)
        multiStepFeedback.pushInfo(self.tr('Getting bounding box'))
        dem_bounding_box = algo_runner.run_bounding_box_retrieve(single_contour_lines, context, feedback)
        dem_boundary_buffer = algo_runner.run_buffer(dem_bounding_box, -20, context, feedback)

        multiStepFeedback.setCurrentStep(2)
        multiStepFeedback.pushInfo(self.tr('Bounding box to line'))
        dem_boundary = algo_runner.run_polygons_to_lines(dem_boundary_buffer, context, feedback)

        boundary = [feat for feat in dem_boundary.getFeatures()]

        multiStepFeedback.setCurrentStep(3)
        multiStepFeedback.pushInfo(self.tr('Intersecting with boundary'))

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            geom = feature.geometry()
            if geom.length() <= 50:
                continue
            else:
                # request = QgsFeatureRequest().setFilterRect(dem_bounding_box['OUTPUT'])
                engine = QgsGeometry.createGeometryEngine(boundary[0].geometry().constGet())
                engine.prepareGeometry()

                if engine.intersects(feature.geometry().constGet()):

                   continue

                else:
                    donutHole_feat = QgsFeature()
                    # polygon = feature.geometry().coerceToType(3)
                    # poly_geom = QgsGeometry().fromPolygonXY(polygon[0].asPolygon())
                    poly_geom = QgsGeometry().fromPolylineXY(feature.geometry().asPolyline())
                    donutHole_feat.setGeometry(poly_geom)
                    donutHole_feat.setAttributes(feature.attributes())
                    donut_layer_provider.addFeature(donutHole_feat)

                    # donut_feat.setAttributes(inputFields)
                    # donut_layer_provider.addFeature(donut_feat)
                    # donut_layer.commitChanges()
                    # donut_list.append(feature)

        # # donut_layer_provider.addFeatures(donut_list)

        polygons = algo_runner.run_polygonize(donut_layer, context, True, feedback)

        dissolved_polygons = algo_runner.run_dissolve(polygons, context, feedback)
        single_dissolved_polygons = algo_runner.run_multi_to_single_part(dissolved_polygons, context, feedback)

        point_pixels_list = [point for point in point_pixels.getFeatures()]

        # # clipped_raster = algo_runner.run_clip_raster(dem_raster, dissolved_polygons, context, feedback)
        # clipped = []
        dict_geom = dict()
        for current, dissolved_polygon in enumerate(single_dissolved_polygons.getFeatures()):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            else:
                engine = QgsGeometry.createGeometryEngine(dissolved_polygon.geometry().constGet())
                engine.prepareGeometry()

                overlay_points = []
                points_contour = []
                
                for point in point_pixels_list:
                    if engine.intersects(point.geometry().constGet()):
                        overlay_points.append(point)
                        points_contour.append(point['cota'])

                dict_geom[dissolved_polygon] = (overlay_points, points_contour)
        new_dict = dict()
        # for polyGeom, pointList in dict_geom.items():
        #     max_contour = max(pointList[1])
        #     max_contour_point = pointList[0][pointList[1].index(max_contour)]
        #     min_contour = min(pointList[1])
        #     min_contour_point = pointList[0][pointList[1].index(min_contour)]
        #     new_dict[poly_geom] = [min_contour_point, max_contour_point]

        # for polyGeom, minMax in new_dict.items():
        #     sink.addFeatures(minMax, QgsFeatureSink.FastInsert)
        #                 # Update the progress bar
        #                 feedback.setProgress(int(current * total))
        # outershell_sink.addFeatures(
        #             polygons_feat_list, QgsFeatureSink.FastInsert)

        # for current, polygons_feat in enumerate(polygons_feat_list):
        #     # Stop the algorithm if cancel button has been clicked
        #     if feedback.isCanceled():
        #         break
        #     outerShellFeatList, donutHoleFeatList = vector_handler.get_feature_outershell_and_holes(
        #         polygons_feat, isMulti)
        #     for outerShell_feat in outerShellFeatList:
        #         outershell_sink.addFeature(
        #             outerShell_feat, QgsFeatureSink.FastInsert)
        #     for donutHole_feat in donutHoleFeatList:
        #         donuthole_sink.addFeature(
        #             donutHole_feat, QgsFeatureSink.FastInsert)

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}
        # return {self.DONUTHOLE: clipped_raster, self.OUTERSHELL: outershell_dest_id, self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'elevationpointsextractor'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Elevation Point Tools'

    def shortHelpString(self):
        """
        Retruns a short helper string for the algorithm
        """
        return self.tr("""extracts elevation points""")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DemElevationPointsExtractorAlgorithm()
